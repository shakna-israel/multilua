# Definitions

@funcsection{multilua.new}

@deffn Function multilua.new -> nil|userdata

This function attempts to create a fresh @code{multilua} state object.

Returns:

@itemize
@item @code{nil} - Something went wrong. Probably a memory error.
@item @code{userdata} - The @code{multilua} state object.
@end itemize

The @code{userdata} object should have a @code{metatable}.

@cindex multilua state
@end deffn

---

@funcsection{multilua.close}

@deffn Function multilua.close <userdata:state> -> boolean|nil

This function, given a @code{multilua} @code{state}, closes the state.

@code{state['self']} should become @code{nil} after this function is called.

@i{WARNING}: This function invokes a garbage collection on @code{state}, and therefore may have a performance impact.

@i{WARNING}: If the @code{state} is the host Lua's @code{state}, this function is a no-op.

@i{Note}: Whilst the @code{state} attempts to prove that it is closed, use after closing should be considered a @i{code smell}.

Returns:

@itemize
@item @code{true} - if the state was successfully closed.
@item @code{nil} - if the state could not be closed.
@end itemize

@end deffn

---

@funcsection{multilua.dump}

@deffn Function multilua.dump <userdata:state> -> boolean|nil

This function, given a valid @code{multilua} @code{state}, attempts to dump the current @code{stack} to @code{stdout} of the terminal.

@i{WARNING}: This function is primarily meant for debugging. The output format is meant for human consumption, and is not guaranteed in any way, shape, or form.

Returns:

@itemize
@item @code{true} - if the dump successfully took place.
@item @code{nil} - if the state was somehow invalid.
@end itemize

@end deffn

---

@funcsection{multilua.openlibs}

@deffn Function multilua.openlibs <userdata:state> -> boolean|nil

This function, given a valid @code{multilua} @code{state}, attempts to open all standard Lua libraries into the given @code{state}.

Returns:

@itemize
@item @code{true} - if the open successfully took place.
@item @code{nil} - if the state was somehow invalid.
@end itemize

@end deffn

---

@funcsection{multilua.absindex}

@deffn Function multilua.absindex <userdata:state> <integer:index> -> integer|nil

This function, given a valid @code{multilua} @code{state}, attempts to convert @code{index} from a relative position (such as @code{-1}), to the absolute position.

Returns:

@itemize
@item @code{integer} - The absolute position equivalent to the relative position given.
@item @code{nil}
	@itemize
	@item If the @code{state} was somehow invalid.
	@item If the @code{index} was somehow invalid.
	@end itemize
@end itemize

@end deffn

---

@funcsection{multilua.arith}

@deffn Function multilua.arith <userdata:state> <string:operator> -> number|nil

This function, given a valid @code{multilua} @code{state}, performs an arithmetic or bitwise operation on the one or two values at the top of the @code{stack} for the given @code{state}.

In the case of an invalid @code{multilua} @code{state}, returns @code{nil}.

@emph{WARNING}: In the case of an @code{operator} not listed below, @i{Undefined Behaviour} results.

If the @code{operator} is:

@itemize
@item @code{"+"}
	@itemize
	@item Pops two numeric values from the @code{state}'s @code{stack}, and performs addition on them.
	@item The result is pushed to the @code{state}'s @code{stack}.
	@item If the result is an @code{integer} or @code{float}, then it is returned by the function.
		@itemize
		@item Otherwise, @code{nil} is returned.
		@end itemize
	@end itemize
@item @code{"-"}
	@itemize
	@item Pops two numeric values from the @code{state}'s @code{stack}, and performs subtraction on them.
	@item The result is pushed to the @code{state}'s @code{stack}.
	@item If the result is an @code{integer} or @code{float}, then it is returned by the function.
		@itemize
		@item Otherwise, @code{nil} is returned.
		@end itemize
	@end itemize
@item @code{"-u"}
	@itemize
	@item Pops one numeric value from the @code{state}'s @code{stack}, and performs negation on the value.
	@item The result is pushed to the @code{state}'s @code{stack}.
	@item If the result is an @code{integer} or @code{float}, then it is returned by the function.
		@itemize
		@item Otherwise, @code{nil} is returned.
		@end itemize
	@end itemize
@item @code{"*"}
	@itemize
	@item Pops two numeric values from the @code{state}'s @code{stack}, and performs multiplication on them.
	@item The result is pushed to the @code{state}'s @code{stack}.
	@item If the result is an @code{integer} or @code{float}, then it is returned by the function.
		@itemize
		@item Otherwise, @code{nil} is returned.
		@end itemize
	@end itemize
@item @code{"/"}
	@itemize
	@item Pops two numeric values from the @code{state}'s @code{stack}, and performs floating point division on them.
	@item The result is pushed to the @code{state}'s @code{stack}.
	@item If the result is an @code{integer} or @code{float}, then it is returned by the function.
		@itemize
		@item Otherwise, @code{nil} is returned.
		@end itemize
	@end itemize
@item @code{"//"}
	@itemize
	@item Pops two numeric values from the @code{state}'s @code{stack}, and performs floor division on them.
	@item The result is pushed to the @code{state}'s @code{stack}.
	@item If the result is an @code{integer}, then it is returned by the function.
		@itemize
		@item Otherwise, @code{nil} is returned.
		@end itemize
	@end itemize
@item @code{"%"}
	@itemize
	@item Pops two numeric values from the @code{state}'s @code{stack}, and performs a modulo operation on them.
	@item The result is pushed to the @code{state}'s @code{stack}.
	@item If the result is an @code{integer} or @code{float}, then it is returned by the function.
		@itemize
		@item Otherwise, @code{nil} is returned.
		@end itemize
	@end itemize
@item @code{"^"}
	@itemize
	@item Pops two numeric values from the @code{state}'s @code{stack}, and performs a exponention operation on them.
	@item The result is pushed to the @code{state}'s @code{stack}.
	@item If the result is an @code{integer} or @code{float}, then it is returned by the function.
		@itemize
		@item Otherwise, @code{nil} is returned.
		@end itemize
	@end itemize
@item @code{"&"}
	@itemize
	@item Pops two numeric values from the @code{state}'s @code{stack}, and performs a bitwise @i{AND} operation on them.
	@item The result is pushed to the @code{state}'s @code{stack}.
	@item If the result is an @code{integer} or @code{float}, then it is returned by the function.
		@itemize
		@item Otherwise, @code{nil} is returned.
		@end itemize
	@end itemize
@item @code{"|"}
	@itemize
	@item Pops two numeric values from the @code{state}'s @code{stack}, and performs a bitwise @i{OR} operation on them.
	@item The result is pushed to the @code{state}'s @code{stack}.
	@item If the result is an @code{integer} or @code{float}, then it is returned by the function.
		@itemize
		@item Otherwise, @code{nil} is returned.
		@end itemize
	@end itemize
@item @code{"<"}
	@itemize
	@item Pops two numeric values from the @code{state}'s @code{stack}, and performs a bitwise @i{LEFT SHIFT} operation on them.
	@item The result is pushed to the @code{state}'s @code{stack}.
	@item If the result is an @code{integer} or @code{float}, then it is returned by the function.
		@itemize
		@item Otherwise, @code{nil} is returned.
		@end itemize
	@end itemize
@item @code{">"}
	@itemize
	@item Pops two numeric values from the @code{state}'s @code{stack}, and performs a bitwise @i{RIGHT SHIFT} operation on them.
	@item The result is pushed to the @code{state}'s @code{stack}.
	@item If the result is an @code{integer} or @code{float}, then it is returned by the function.
		@itemize
		@item Otherwise, @code{nil} is returned.
		@end itemize
	@end itemize
@item @code{"~"}
	@itemize
	@item Pops two numeric values from the @code{state}'s @code{stack}, and performs a bitwise @i{XOR} (exclusive @i{OR}) operation on them.
	@item The result is pushed to the @code{state}'s @code{stack}.
	@item If the result is an @code{integer} or @code{float}, then it is returned by the function.
		@itemize
		@item Otherwise, @code{nil} is returned.
		@end itemize
	@end itemize
@item @code{"~|"}
	@itemize
	@item Pops one numeric value from the @code{state}'s @code{stack}, and performs a bitwise @i{NOT} operation on it.
	@item The result is pushed to the @code{state}'s @code{stack}.
	@item If the result is an @code{integer} or @code{float}, then it is returned by the function.
		@itemize
		@item Otherwise, @code{nil} is returned.
		@end itemize
	@end itemize
@end itemize

@end deffn

---

@comment TODO: multilua.call
@comment TODO: multilua.checkstack
@comment TODO: multilua.compare
@comment TODO: multilua.concat
@comment TODO: multilua.copy
@comment TODO: multilua.createtable
@comment TODO: multilua.error
@comment TODO: multilua.gc
@comment TODO: multilua.getfield
@comment TODO: multilua.luaversion
@comment TODO: multilua.xmove
@comment TODO: multilua.yield
@comment TODO: multilua.getglobal
@comment TODO: multilua.geti
@comment TODO: multilua.getmetatable
@comment TODO: multilua.gettable
@comment TODO: multilua.gettop
@comment TODO: multilua.getuservalue
@comment TODO: multilua.insert
@comment TODO: multilua.isboolean
@comment TODO: multilua.iscfunction
@comment TODO: multilua.isfunction
@comment TODO: multilua.isinteger
@comment TODO: multilua.islightuserdata
@comment TODO: multilua.isnil
@comment TODO: multilua.isnone
@comment TODO: multilua.isnoneornil
@comment TODO: multilua.isnumber
@comment TODO: multilua.isstring
@comment TODO: multilua.istable
@comment TODO: multilua.isthread
@comment TODO: multilua.isuserdata
@comment TODO: multilua.isyieldable
@comment TODO: multilua.len
@comment TODO: multilua.newtable
@comment TODO: multilua.newthread
@comment TODO: multilua.newuserdata
@comment TODO: multilua.next
@comment TODO: multilua.pcall
@comment TODO: multilua.pop
@comment TODO: multilua.pushboolean
@comment TODO: multilua.pushglobaltable
@comment TODO: multilua.pushinteger
@comment TODO: multilua.pushstring
@comment TODO: multilua.pushnstring
@comment TODO: multilua.pushnil
@comment TODO: multilua.pushnumber
@comment TODO: multilua.pushvalue
@comment TODO: multilua.pushlightuserdata
@comment TODO: multilua.rawequal
@comment TODO: multilua.rawget
@comment TODO: multilua.rawgeti
@comment TODO: multilua.rawlen
@comment TODO: multilua.rawset
@comment TODO: multilua.rawseti
@comment TODO: multilua.rawsetp
@comment TODO: multilua.remove
@comment TODO: multilua.replace
@comment TODO: multilua.rotate
@comment TODO: multilua.setfield
@comment TODO: multilua.setglobal
@comment TODO: multilua.seti
@comment TODO: multilua.setmetatable
@comment TODO: multilua.settable
@comment TODO: multilua.settop
@comment TODO: multilua.setuservalue
@comment TODO: multilua.status
@comment TODO: multilua.toboolean
@comment TODO: multilua.tointeger
@comment TODO: multilua.tointegerx
@comment TODO: multilua.tostring
@comment TODO: multilua.tonumber
@comment TODO: multilua.tonumberx
@comment TODO: multilua.topointer
@comment TODO: multilua.tothread
@comment TODO: multilua.touserdata
@comment TODO: multilua.type
@comment TODO: multilua.gethookcount
@comment TODO: multilua.gethookmask
@comment TODO: multilua.getupvalue
@comment TODO: multilua.setupvalue
@comment TODO: multilua.upvalueid
@comment TODO: multilua.upvaluejoin
@comment TODO: multilua.argcheck
@comment TODO: multilua.argerror
@comment TODO: multilua.callmeta
@comment TODO: multilua.checkany
@comment TODO: multilua.checkinteger
@comment TODO: multilua.checkstring
@comment TODO: multilua.checknumber
@comment TODO: multilua.lcheckstack
@comment TODO: multilua.checktype
@comment TODO: multilua.checkudata
@comment TODO: multilua.checkversion
@comment TODO: multilua.dofile
@comment TODO: multilua.dostring
@comment TODO: multilua.execresult
@comment TODO: multilua.fileresult
@comment TODO: multilua.getmetafield
@comment TODO: multilua.lgetmetatable
@comment TODO: multilua.getsubtable
@comment TODO: multilua.gsub
@comment TODO: multilua.llen
@comment TODO: multilua.loadbuffer
@comment TODO: multilua.loadbufferx
@comment TODO: multilua.loadfile
@comment TODO: multilua.loadfilex
@comment TODO: multilua.loadstring
@comment TODO: multilua.newmetatable
@comment TODO: multilua.optinteger
@comment TODO: multilua.optstring
@comment TODO: multilua.optnumber
@comment TODO: multilua.ref
@comment TODO: multilua.refnil
@comment TODO: multilua.noref
@comment TODO: multilua.unref
@comment TODO: multilua.registryindex
@comment TODO: multilua.ridx_mainthread
@comment TODO: multilua.ridx_globals
@comment TODO: multilua.lsetmetatable
@comment TODO: multilua.testudata
@comment TODO: multilua.ltostring
@comment TODO: multilua.traceback
@comment TODO: multilua.where
@comment TODO: multilua.resume
@comment TODO: multilua.rawgetp
@comment TODO: multilua.pushthread
@comment TODO: multilua.tocfunction
@comment TODO: multilua.pushcclosure
@comment TODO: multilua.pushcfunction
@comment TODO: multilua.newreg
@comment TODO: multilua.tabletoreg
@comment TODO: multilua.setfuncs
@comment TODO: multilua.requiref
@comment TODO: multilua.buffinit
@comment TODO: multilua.buffinitsize
@comment TODO: multilua.prepbuffsize
@comment TODO: multilua.prepbuffer
@comment TODO: multilua.addchar
@comment TODO: multilua.addstring
@comment TODO: multilua.addsize
@comment TODO: multilua.addvalue
@comment TODO: multilua.pushresult
@comment TODO: multilua.pushresultsize
@comment TODO: multilua.newlib
@comment TODO: multilua.register
@comment TODO: multilua.atpanic
@comment TODO: multilua.load
@comment TODO: multilua.getallocf
@comment TODO: multilua.setallocf
@comment TODO: multilua.getextraspace
@comment TODO: multilua.pcallk
@comment TODO: multilua.yieldk
@comment TODO: multilua.gethook
@comment TODO: multilua.sethook
@comment TODO: multilua.checkoption

@funcsection{multilua.fetchable}

@deffn Function multilua.fetchable <userdata:state> [<integer:index>] -> nil|boolean

Given a @code{multilua state} and a valid @code{index}, returns whether or not the value can be @emph{safely} copied from @code{state} to the host Lua state.

If no @code{index} is provided, defaults to @code{-1}.

Returns:

@itemize
@item @code{nil} - An error ocurred.
	@itemize
	@item The @code{index} may be invalid.
	@item The @code{state} may be invalid.
	@end itemize
@item @code{false} - The value cannot be safely copied. You will need to manually deepcopy it, or you will receive only a reference.
@item @code{true} - The value can be safely copied.
@end itemize

@end deffn
